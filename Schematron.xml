<?xml version="1.0" encoding="utf-8"?>
<sch:schema xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" queryBinding="xslt2" id="EMSDataSet" schemaVersion="3.3.4.140618" see="http://www.nemsis.org/v3/downloads/schematron.html">
  <sch:title>NEMSIS National ISO Schematron file for EMSDataSet</sch:title>
  <sch:ns prefix="nem" uri="http://www.nemsis.org" />
  <sch:ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance" />
  <!-- "Initialize" variables used by nemsisDiagnostic. -->
  <sch:let name="nemsisElements" value="()" />
  <sch:let name="nemsisElementsMissing" value="''" />
  <sch:let name="nemsisElementsMissingContext" value="()" />
  <!-- Set up key for NEMSIS element name lookup list (look up XML element name to retrieve NEMSIS element name). -->
  <xsl:variable name="nemSch_lookup_elements">
    <?DSDL_INCLUDE_START includes/lookup_elements.xml#nemSch_lookup_elements?>
    <nemSch_lookup_elements xmlns="http://www.nemsis.org" xml:id="nemSch_lookup_elements">
  
      <element name="eVitals.33">Revised Trauma Score</element>
    </nemSch_lookup_elements>
    <?DSDL_INCLUDE_END includes/lookup_elements.xml#nemSch_lookup_elements?>
  </xsl:variable>
  <sch:let name="nemSch_elements" value="$nemSch_lookup_elements//*:nemSch_lookup_elements" />
  <xsl:key name="nemSch_key_elements" match="nem:element" use="@name" />
  <!-- PHASES -->
  <!-- No phases used. -->
  <!-- PATTERNS -->
  <?DSDL_INCLUDE_START includes/pattern_consistency_dAgency.02_eResponse.01.xml?>
  <sch:pattern id="nemSch_consistency_dAgency.02_eResponse.01">
    <!-- This pattern verifies that the EMS Agency Number in eResponse.01 matches the EMS Agency Number in dAgency.02. -->
    <sch:title>eResponse.01 EMS Agency Number matches dAgency.02 EMS Agency Number.</sch:title>
    <sch:rule id="nemSch_consistency_dAgency.02_eResponse.01_eResponse.01" context="nem:eResponse.01">
      <sch:let name="nemsisElements" value="., ancestor::nem:Header/nem:DemographicGroup/nem:dAgency.02" />
      <sch:assert id="nemSch_consistency_dAgency.02_eResponse.01_eResponse.01_match" role="[WARNING]" diagnostics="nemsisDiagnostic" test=". = ancestor::nem:Header/nem:DemographicGroup/nem:dAgency.02">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> in the patient care report should match <sch:value-of select="key('nemSch_key_elements', 'dAgency.02', $nemSch_elements)" /> in the agency demographic information.
    </sch:assert>
    </sch:rule>
  </sch:pattern>
  <?DSDL_INCLUDE_END includes/pattern_consistency_dAgency.02_eResponse.01.xml?>
  <?DSDL_INCLUDE_START includes/pattern_consistency_delay.xml?>
  <sch:pattern id="nemSch_consistency_delay">
    <!-- This pattern validates consistency in eResponse.08 through eResponse.12 (Delays). -->
    <sch:title>When a delay for a particular phase of a response is "None/No Delay", no other delays should be recorded for that phase.</sch:title>
    <sch:rule id="nemSch_consistency_delay_abstract" abstract="true">
      <sch:let name="nemsisElements" value="../*[local-name() = local-name(current())]" />
      <!-- Assert that "None/No Delay" should be the only value recorded for the delay.  -->
      <sch:assert id="nemSch_consistency_delay_none" role="[WARNING]" diagnostics="nemsisDiagnostic" test="count(../*[local-name() = local-name(current())]) = 1">
      When <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> is "None/No Delay", no other <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be recorded.
    </sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_consistency_delay_eResponse.08" context="nem:eResponse.08[. = '2208013']">
      <!-- This rule fires when there is an instance of eResponse.08 Type of Dispatch Delay set to "None/No Delay". -->
      <sch:extends rule="nemSch_consistency_delay_abstract" />
    </sch:rule>
    <sch:rule id="nemSch_consistency_delay_eResponse.09" context="nem:eResponse.09[. = '2209011']">
      <!-- This rule fires when there is an instance of eResponse.09 Type of Response Delay set to "None/No Delay". -->
      <sch:extends rule="nemSch_consistency_delay_abstract" />
    </sch:rule>
    <sch:rule id="nemSch_consistency_delay_eResponse.10" context="nem:eResponse.10[. = '2210017']">
      <!-- This rule fires when there is an instance of eResponse.10 Type of Scene Delay set to "None/No Delay". -->
      <sch:extends rule="nemSch_consistency_delay_abstract" />
    </sch:rule>
    <sch:rule id="nemSch_consistency_delay_eResponse.11" context="nem:eResponse.11[. = '2211011']">
      <!-- This rule fires when there is an instance of eResponse.11 Type of Transport Delay set to "None/No Delay". -->
      <sch:extends rule="nemSch_consistency_delay_abstract" />
    </sch:rule>
    <sch:rule id="nemSch_consistency_delay_eResponse.12" context="nem:eResponse.12[. = '2212015']">
      <!-- This rule fires when there is an instance of eResponse.12 Type of Turn-Around Delay set to "None/No Delay". -->
      <sch:extends rule="nemSch_consistency_delay_abstract" />
    </sch:rule>
  </sch:pattern>
  <?DSDL_INCLUDE_END includes/pattern_consistency_delay.xml?>
  <?DSDL_INCLUDE_START includes/pattern_consistency_eArrest.xml?>
  <sch:pattern id="nemSch_consistency_eArrest">
    <!-- This pattern validates consistency between the presence of cardiac arrest and the presence 
       of elements that are only collected in cardiac arrest cases. The elements in the eArrest 
       section should be recorded when (and only when) eArrest.01 Cardiac Arrest is "Yes...". -->
    <sch:title>When eArrest.01 Cardiac Arrest is "Yes...", other elements in the eArrest section are recorded, and when eArrest.01 Cardiac Arrest is not "Yes...", other elements in the eArrest section are not recorded.</sch:title>
    <sch:rule id="nemSch_consistency_eArrest_all" context="nem:eArrest[nem:eArrest.01 = ('3001003', '3001005')]">
      <!-- This rule fires when eArrest.01 Cardiac Arrest is "Yes...". -->
      <!-- Flag each of the following elements if it is empty. -->
      <sch:let name="eArrest.02" value="if(nem:eArrest.02 != '') then '' else key('nemSch_key_elements', 'eArrest.02', $nemSch_elements)" />
      <sch:let name="eArrest.03" value="if(not(nem:eArrest.03 = '')) then '' else key('nemSch_key_elements', 'eArrest.03', $nemSch_elements)" />
      <sch:let name="eArrest.04" value="if(not(nem:eArrest.04 = '')) then '' else key('nemSch_key_elements', 'eArrest.04', $nemSch_elements)" />
      <!-- Do not flag eArrest.05 CPR Care Provided Prior to EMS Arrival or eArrest.07 AED Use Prior to EMS Arrival if Cardiac Arrest is not "Yes, Prior to EMS Arrival".  -->
      <sch:let name="eArrest.05" value="if(nem:eArrest.05 != '' or nem:eArrest.01 != '3001003') then '' else key('nemSch_key_elements', 'eArrest.05', $nemSch_elements)" />
      <sch:let name="eArrest.07" value="if(nem:eArrest.07 != '' or nem:eArrest.01 != '3001003') then '' else key('nemSch_key_elements', 'eArrest.07', $nemSch_elements)" />
      <sch:let name="nemsisElements" value="(nem:eArrest.01, (nem:eArrest.02, nem:eArrest.03, nem:eArrest.04, nem:eArrest.05, nem:eArrest.07)[. = ''])" />
      <!-- Assert that none of the elements above should be flagged. If the assert fails, list the flagged elements.  -->
      <sch:assert id="nemSch_consistency_eArrest_all_present" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($eArrest.02 or $eArrest.03 or $eArrest.04 or $eArrest.05 or $eArrest.07)">
      When <sch:value-of select="key('nemSch_key_elements', 'eArrest.01', $nemSch_elements)" /> is "Yes", the following information related to cardiac arrest and resuscitation should be recorded:
      <sch:value-of select="string-join(($eArrest.02, $eArrest.03, $eArrest.04, $eArrest.05, $eArrest.07)[. != ''], ', ')" /></sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_consistency_eArrest.01" context="nem:eArrest[some $element in .//*[local-name() != 'eArrest.01'] satisfies normalize-space($element) != '']">
      <!-- This rule fires when eArrest.01 Cardiac Arrest is not "Yes..." and the eArrest section has a value recorded in any element other than eArrest.01. -->
      <sch:let name="nemsisElements" value="(nem:eArrest.01[. = ''], *[. != ''])" />
      <sch:assert id="nemSch_consistency_eArrest.01_yes" role="[WARNING]" diagnostics="nemsisDiagnostic" test="false()">
      Information related to cardiac arrest and resuscitation should be recorded only when <sch:value-of select="key('nemSch_key_elements', 'eArrest.01', $nemSch_elements)" /> is "Yes".
    </sch:assert>
    </sch:rule>
  </sch:pattern>
  <?DSDL_INCLUDE_END includes/pattern_consistency_eArrest.xml?>
  <?DSDL_INCLUDE_START includes/pattern_consistency_eArrest.03.xml?>
  <sch:pattern id="nemSch_consistency_eArrest.03">
    <!-- This pattern validates consistency in eArrest.03 Resuscitation Attempted by EMS. -->
    <sch:title>eArrest.03 Resuscitation Attempted By EMS does not contain "Attempted/Initiated..." and "Not Attempted..." in the same record.</sch:title>
    <sch:rule id="nemSch_consistency_eArrest.03_attempted" context="nem:eArrest[nem:eArrest.03 != '']">
      <!-- This rule fires when there are non-empty instances of eArrest.03 within eArrest. -->
      <sch:let name="nemsisElements" value="nem:eArrest.03" />
      <!-- Assert that eArrest.03 Resuscitation Attempted by EMS should not contain both "Attempted/Initiated..." and "Not Attempted..." in the same record.  -->
      <sch:assert id="nemSch_consistency_eArrest.03_attempted_not" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not(nem:eArrest.03 = ('3003001', '3003003', '3003005') and nem:eArrest.03 = ('3003007', '3003009', '3003011'))">
        <sch:value-of select="key('nemSch_key_elements', 'eArrest.03', $nemSch_elements)" /> should not contain both "Attempted/Initiated..." and "Not Attempted..." in the same record.
    </sch:assert>
    </sch:rule>
  </sch:pattern>
  <?DSDL_INCLUDE_END includes/pattern_consistency_eArrest.03.xml?>
  <?DSDL_INCLUDE_START includes/pattern_consistency_eArrest.03_eArrest.09.xml?>
  <sch:pattern id="nemSch_consistency_eArrest.03_eArrest.09">
    <!-- This pattern validates consistency between eArrest.03 Resuscitation Attempted by EMS and eArrest.09 Type of CPR Provided. -->
    <sch:title>eArrest.03 Resuscitation Attempted By EMS should contain "Initiated Chest Compressions" when eArrest.09 Type of CPR Provided contains "Compressions..." and should contain "Attempted Ventilation" when eArrest.09 Type of CPR Provided contains "Ventilation...".</sch:title>
    <sch:rule id="nemSch_consistency_eArrest.03_eArrest.09_match" context="nem:eArrest[nem:eArrest.09 != '']">
      <!-- This rule fires when there are non-empty instances of eArrest.09 within eArrest. -->
      <sch:let name="nemsisElements" value="(nem:eArrest.03, nem:eArrest.09)" />
      <!-- Assert that eArrest.03 Resuscitation Attempted by EMS should contain "Initiated Chest Compressions" when eArrest.09 Type of CPR Provided contains "Compressions...".  -->
      <sch:assert id="nemSch_consistency_eArrest.03_eArrest.09_match_compressions" role="[WARNING]" diagnostics="nemsisDiagnostic" test="nem:eArrest.03 = '3003005' or not(nem:eArrest.09 = ('3009001', '3009003', '3009005', '3009007', '3009009', '3009011'))">
        <sch:value-of select="key('nemSch_key_elements', 'eArrest.03', $nemSch_elements)" /> should contain "Initiated Chest Compressions" when <sch:value-of select="key('nemSch_key_elements', 'eArrest.09', $nemSch_elements)" /> contains "Compressions...".
    </sch:assert>
      <!-- Assert that eArrest.03 Resuscitation Attempted by EMS should contain "Attempted Ventilation" when eArrest.09 Type of CPR Provided contains "Ventilation...".  -->
      <sch:assert id="nemSch_consistency_eArrest.03_eArrest.09_match_ventilation" role="[WARNING]" diagnostics="nemsisDiagnostic" test="nem:eArrest.03 = '3003003' or not(nem:eArrest.09 = ('3009013', '3009015', '3009017', '3009019'))">
        <sch:value-of select="key('nemSch_key_elements', 'eArrest.03', $nemSch_elements)" /> should contain "Attempted Ventilation" when <sch:value-of select="key('nemSch_key_elements', 'eArrest.09', $nemSch_elements)" /> contains "Ventilation...".
    </sch:assert>
    </sch:rule>
  </sch:pattern>
  <?DSDL_INCLUDE_END includes/pattern_consistency_eArrest.03_eArrest.09.xml?>
  <?DSDL_INCLUDE_START includes/pattern_consistency_eDisposition.12.xml?>
  <sch:pattern id="nemSch_consistency_eDisposition.12">
    <!-- This pattern validates that certain elements are recorded, based on the Incident/Patient Disposition. -->
    <sch:title>Certain elements are recorded, based on eDisposition.12 Incident/Patient Disposition.</sch:title>
    <sch:rule id="nemSch_consistency_eDisposition.12_no_scene" context="nem:PatientCareReport[nem:eDisposition/nem:eDisposition.12[. = 4212007]]">
      <!-- This rule fires if Disposition is "Canceled (Prior to Arrival at Scene)". Nothing is checked. -->
      <sch:let name="nemsisElements" value="nem:eDisposition.12" />
      <sch:report role="[WARNING]" diagnostics="nemsisDiagnostic" test="false()">
      Dummy report needed to make this rule valid. This report will never succeed.
    </sch:report>
    </sch:rule>
    <sch:rule id="nemSch_consistency_eDisposition.12_all" context="nem:PatientCareReport">
      <!-- This rule fires on each PatientCareReport. -->
      <!-- Set flags based on eDisposition.12 Incident/Patient Disposition. -->
      <!-- no_scene: Canceled (Prior to Arrival at Scene). -->
      <sch:let name="no_scene" value="if(ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = 4212007]) then true() else false()" />
      <!-- no_patient: No scene or Assist, No Patient, or Standby. -->
      <sch:let name="no_patient" value="if($no_scene or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. &lt;= 4212011 or . = (4212039, 4212041)]) then true() else false()" />
      <!-- no_treatment: No patient or No Resuscitation Attempted, No Treatment/Transport Required, or Transport of Body Parts or Organs only. -->
      <sch:let name="no_treatment" value="if($no_patient or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212013, 4212015, 4212021, 4212043)]) then true() else false()" />
      <!-- no_transport: No patient or Without Transport, No Treatment/Transport Required, Released, or Transferred. -->
      <sch:let name="no_transport" value="if($no_patient or ancestor-or-self::nem:PatientCareReport/nem:eDisposition/nem:eDisposition.12[. = (4212015, 4212019, 4212021, 4212025, 4212027, 4212029, 4212031)]) then true() else false()" />
      <!-- Flag each of the following elements if it is empty, contingent upon a flag that was set based on the Disposition. -->
      <sch:let name="eDisposition.17" value="if($no_transport or nem:eDisposition/nem:eDisposition.17 != '') then '' else key('nemSch_key_elements', 'eDisposition.17', $nemSch_elements)" />
      <sch:let name="eDisposition.20" value="if($no_transport or not(nem:eDisposition/nem:eDisposition.20 = '')) then '' else key('nemSch_key_elements', 'eDisposition.20', $nemSch_elements)" />
      <sch:let name="ePatient.13" value="if($no_patient or nem:ePatient/nem:ePatient.13 != '') then '' else key('nemSch_key_elements', 'ePatient.13', $nemSch_elements)" />
      <sch:let name="ePatient.15" value="if($no_patient or nem:ePatient/nem:ePatient.AgeGroup/nem:ePatient.15 != '') then '' else key('nemSch_key_elements', 'ePatient.15', $nemSch_elements)" />
      <sch:let name="eScene.09" value="if($no_scene or nem:eScene/nem:eScene.09 != '') then '' else key('nemSch_key_elements', 'eScene.09', $nemSch_elements)" />
      <sch:let name="eTimes.05" value="if($no_scene or nem:eTimes/nem:eTimes.05 != '') then '' else key('nemSch_key_elements', 'eTimes.05', $nemSch_elements)" />
      <sch:let name="eTimes.06" value="if($no_scene or nem:eTimes/nem:eTimes.06 != '') then '' else key('nemSch_key_elements', 'eTimes.06', $nemSch_elements)" />
      <sch:let name="eTimes.07" value="if($no_patient or nem:eTimes/nem:eTimes.07 != '') then '' else key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)" />
      <sch:let name="eTimes.09" value="if($no_scene or nem:eTimes/nem:eTimes.09 != '') then '' else key('nemSch_key_elements', 'eTimes.09', $nemSch_elements)" />
      <sch:let name="eTimes.11" value="if($no_transport or nem:eTimes/nem:eTimes.11 != '') then '' else key('nemSch_key_elements', 'eTimes.11', $nemSch_elements)" />
      <sch:let name="eTimes.12" value="if($no_transport or nem:eTimes/nem:eTimes.12 != '') then '' else key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)" />
      <sch:let name="nemsisElements" value="(nem:eDisposition/nem:eDisposition.12, (nem:eDisposition/(nem:eDisposition.17[not($no_transport)], nem:eDisposition.20[not($no_transport)]), nem:ePatient/(nem:ePatient.13[not($no_patient)], nem:ePatient.AgeGroup/nem:ePatient.15[not($no_patient)]), nem:eScene/nem:eScene.09[not($no_scene)], nem:eTimes/(nem:eTimes.05, nem:eTimes.06, nem:eTimes.07[not($no_patient)], nem:eTimes.09[not($no_scene)], nem:eTimes.11[not($no_transport)], nem:eTimes.12[not($no_transport)]))[. = ''])" />
      <!-- Assert that none of the elements above should be flagged. If the assert fails, list the flagged elements.  -->
      <sch:assert id="nemSch_consistency_eDisposition.12_all_present" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($eDisposition.17 or $eDisposition.20 or $ePatient.13 or $ePatient.15 or $eScene.09 or $eTimes.05 or $eTimes.06 or $eTimes.07 or $eTimes.09 or $eTimes.11 or $eTimes.12)">
      Based on <sch:value-of select="key('nemSch_key_elements', 'eDisposition.12', $nemSch_elements)" />, the following should be recorded:
      <sch:value-of select="string-join(($eDisposition.17, $eDisposition.20, $ePatient.13, $ePatient.15, $eScene.09, $eTimes.05, $eTimes.06, $eTimes.07, $eTimes.09, $eTimes.11, $eTimes.12)[. != ''], ', ')" /></sch:assert>
    </sch:rule>
  </sch:pattern>
  <?DSDL_INCLUDE_END includes/pattern_consistency_eDisposition.12.xml?>
  <?DSDL_INCLUDE_START includes/pattern_consistency_eDisposition.HospitalTeamActivationGroup.xml?>
  <sch:pattern id="nemSch_consistency_eDisposition.HospitalTeamActivationGroup">
    <!-- This pattern validates that eDisposition.24 Destination Team Pre-Arrival Alert or Activation and eDisposition.25 Date/Time of Destination Prearrival Alert or Activation are both recorded when either one is recorded. -->
    <sch:title>eDisposition.24 Destination Team Pre-Arrival Alert or Activation and eDisposition.25 Date/Time of Destination Prearrival Alert or Activation are both recorded when either one is recorded.</sch:title>
    <sch:rule id="nemSch_consistency_eDisposition.HospitalTeamActivationGroup_eDisposition.24" context="nem:eDisposition.HospitalTeamActivationGroup[nem:eDisposition.25 != '']">
      <!-- This rule fires when eDisposition.25 Date/Time of Destination Prearrival Alert or Activation is recorded. -->
      <sch:let name="nemsisElements" value="*" />
      <!-- Assert that eDisposition.24 Destination Team Pre-Arrival Alert or Activation is also recorded. -->
      <sch:assert id="nemSch_consistency_eDisposition.HospitalTeamActivationGroup_eDisposition.24_present" role="[WARNING]" diagnostics="nemsisDiagnostic" test="nem:eDisposition.24 != ''">
      When <sch:value-of select="key('nemSch_key_elements', 'eDisposition.25', $nemSch_elements)" /> is recorded, <sch:value-of select="key('nemSch_key_elements', 'eDisposition.24', $nemSch_elements)" /> should also be recorded.
    </sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_consistency_eDisposition.HospitalTeamActivationGroup_eDisposition.25" context="nem:eDisposition.HospitalTeamActivationGroup[not(nem:eDisposition.24 = ('', '4224001'))]">
      <!-- This rule fires when eDisposition.25 Date/Time of Destination Prearrival Alert or Activation is not recorded and eDisposition.24 Destination Team Pre-Arrival Alert or Activation is recorded and is not "None". -->
      <sch:let name="nemsisElements" value="*" />
      <!-- Assert that eDisposition.25 Date/Time of Destination Prearrival Alert or Activation is also recorded. -->
      <sch:assert id="nemSch_consistency_eDisposition.HospitalTeamActivationGroup_eDisposition.25_present" role="[WARNING]" diagnostics="nemsisDiagnostic" test="false()">
      When <sch:value-of select="key('nemSch_key_elements', 'eDisposition.24', $nemSch_elements)" /> is recorded, <sch:value-of select="key('nemSch_key_elements', 'eDisposition.25', $nemSch_elements)" /> should also be recorded.
    </sch:assert>
    </sch:rule>
  </sch:pattern>
  <?DSDL_INCLUDE_END includes/pattern_consistency_eDisposition.HospitalTeamActivationGroup.xml?>
  <?DSDL_INCLUDE_START includes/pattern_consistency_eInjury.xml?>
  <sch:pattern id="nemSch_consistency_eInjury">
    <!-- This pattern validates consistency between the presence of possible injury and the 
       presence of elements that are only collected in possible injury cases. The elements in 
       the eInjury section should only be recorded when (and only when) eSituation.02 Possible 
       Injury is "Yes". -->
    <sch:title>When eSituation.02 Possible Injury is "Yes", elements in the eInjury section are recorded, and when eSituation.02 Possible Injury is not "Yes", elements in the eInjury section are not recorded.</sch:title>
    <sch:rule id="nemSch_consistency_eInjury_all" context="nem:eInjury[../nem:eSituation/nem:eSituation.02 = '9922005']">
      <!-- This rule fires when eSituation.02 Possible Injury is "Yes". -->
      <!-- Flag each of the following elements if it is empty. -->
      <sch:let name="eInjury.01" value="if(nem:eInjury.01 != '') then '' else key('nemSch_key_elements', 'eInjury.01', $nemSch_elements)" />
      <sch:let name="nemsisElements" value="(../nem:eSituation/nem:eSituation.02, (nem:eInjury.01)[. = ''])" />
      <!-- Assert that none of the elements above should be flagged. If the assert fails, list the flagged elements.  -->
      <sch:assert id="nemSch_consistency_eInjury_all_present" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($eInjury.01)">
      When <sch:value-of select="key('nemSch_key_elements', 'eSituation.02', $nemSch_elements)" /> is "Yes", the following information related to injury should be recorded:
      <sch:value-of select="string-join(($eInjury.01)[. != ''], ', ')" /></sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_consistency_eInjury_eSituation.02" context="nem:eInjury[some $element in .//* satisfies normalize-space($element) != '']">
      <!-- This rule fires when eSituation.02 Possible Injury is not "Yes" and the eInjury section has a value recorded in any element. -->
      <sch:let name="nemsisElements" value="(../nem:eSituation/nem:eSituation.02, *[. != ''])" />
      <sch:assert id="nemSch_consistency_eInjury.01_yes" role="[WARNING]" diagnostics="nemsisDiagnostic" test="false()">
      Information related to injury should be recorded only when <sch:value-of select="key('nemSch_key_elements', 'eSituation.02', $nemSch_elements)" /> is "Yes".
    </sch:assert>
    </sch:rule>
  </sch:pattern>
  <?DSDL_INCLUDE_END includes/pattern_consistency_eInjury.xml?>
  <?DSDL_INCLUDE_START includes/pattern_consistency_eScene.xml?>
  <sch:pattern id="nemSch_consistency_eScene">
    <!-- This pattern validates consistency between eScene.06 Number of Patients at Scene and eScene.07 Mass Casualty Incident. -->
    <sch:title>eScene.06 Number of Patients at Scene should be "Multiple" when eScene.07 Mass Casualty Incident is "Yes".</sch:title>
    <sch:rule id="nemSch_consistency_eScene.07_mci" context="nem:eScene.07[. = '9923003']">
      <!-- This rule fires when eScene.07 Mass Casualty Incident is "Yes". -->
      <sch:let name="nemsisElements" value="(../nem:eScene.06, .)" />
      <!-- Assert that eScene.06 Number of Patients at Scene should be "Multiple".  -->
      <sch:assert id="nemSch_consistency_eScene.06_multiple" role="[WARNING]" diagnostics="nemsisDiagnostic" test="../nem:eScene.06 = '2707001'">
      When <sch:value-of select="key('nemSch_key_elements', 'eScene.07', $nemSch_elements)" /> is "Yes", <sch:value-of select="key('nemSch_key_elements', 'eScene.06', $nemSch_elements)" /> should be "Multiple".
    </sch:assert>
    </sch:rule>
  </sch:pattern>
  <?DSDL_INCLUDE_END includes/pattern_consistency_eScene.xml?>
  <?DSDL_INCLUDE_START includes/pattern_consistency_eSituation.xml?>
  <sch:pattern id="nemSch_consistency_eSituation">
    <!-- This pattern validates consistency within elements in eSituation. -->
    <sch:title>When a Primary Symptom or Impression is empty, Other Symptoms or Impressions should be empty.</sch:title>
    <sch:rule id="nemSch_consistency_eSituation.09" context="nem:eSituation.09[. = '']">
      <!-- This rule fires when eSituation.09 Primary Symptom is empty. -->
      <sch:let name="nemsisElements" value="(., ../nem:eSituation.10)" />
      <!-- Assert that there should be no non-empty instances of eSituation.10 Other Associated Symptoms.  -->
      <sch:assert id="nemSch_consistency_eSituation.09_eSituation.10" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not(../nem:eSituation.10 != '')">
      When <sch:value-of select="key('nemSch_key_elements', 'eSituation.09', $nemSch_elements)" /> is empty, <sch:value-of select="key('nemSch_key_elements', 'eSituation.10', $nemSch_elements)" /> should be not be recorded.
    </sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_consistency_eSituation.11" context="nem:eSituation.11[. = '']">
      <!-- This rule fires when eSituation.11 Provider's Primary Impression is empty. -->
      <sch:let name="nemsisElements" value="(., ../nem:eSituation.12)" />
      <!-- Assert that there should be no non-empty instances of eSituation.12 Proviers's Secondary Impressions.  -->
      <sch:assert id="nemSch_consistency_eSituation.11_eSituation.12" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not(../nem:eSituation.12 != '')">
      When <sch:value-of select="key('nemSch_key_elements', 'eSituation.11', $nemSch_elements)" /> is empty, <sch:value-of select="key('nemSch_key_elements', 'eSituation.12', $nemSch_elements)" /> should be not be recorded.
    </sch:assert>
    </sch:rule>
  </sch:pattern>
  <?DSDL_INCLUDE_END includes/pattern_consistency_eSituation.xml?>
  <?DSDL_INCLUDE_START includes/pattern_consistency_group.xml?>
  <sch:pattern id="nemSch_consistency_group">
    <!-- This pattern validates that certain elements are recorded in each medication administration, 
       procedure, or set of vital signs. The rules in this pattern fire when an 
       eMedications.MedicationGroup, eProcedures.ProcedureGroup, or eVitals.VitalGroup has a value 
       recorded in any element. The XSD requires at least one instance of each of those groups, 
       even if no medications were administered, no procedures were performed, or no vitals signs 
       were obtained. In those cases, software should generate an instance of the group with all 
       of its required elements empty. This rule does not fire in those cases.-->
    <sch:title>Certain elements are recorded in each real medication administration, procedure, or set of vital signs.</sch:title>
    <sch:rule id="nemSch_consistency_eMedications.MedicationGroup" context="nem:eMedications.MedicationGroup[some $element in .//* satisfies normalize-space($element) != '']">
      <!-- Flag each of the following elements if it is empty. -->
      <sch:let name="eMedications.01" value="if(nem:eMedications.01 != '' or nem:eMedications.02 = '9923003' or nem:eMedications.03/@PN) then '' else key('nemSch_key_elements', 'eMedications.01', $nemSch_elements)" />
      <sch:let name="eMedications.03" value="if(nem:eMedications.03 != '') then '' else key('nemSch_key_elements', 'eMedications.03', $nemSch_elements)" />
      <sch:let name="nemsisElements" value="(nem:eMedications.02, nem:eMedications.03, (nem:eMedications.01)[. = ''])" />
      <!-- Assert that none of the elements above should be flagged. If the assert fails, list the flagged elements.  -->
      <sch:assert id="nemSch_consistency_eMedications.MedicationGroup_all" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($eMedications.01 or $eMedications.03)">
      When a medication is administered, the following should be recorded:
      <sch:value-of select="string-join(($eMedications.01, $eMedications.03)[. != ''], ', ')" /></sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_consistency_eProcedures.ProcedureGroup" context="nem:eProcedures.ProcedureGroup[some $element in .//* satisfies normalize-space($element) != '']">
      <!-- Flag each of the following elements if it is empty. -->
      <sch:let name="eProcedures.01" value="if(nem:eProcedures.01 != '' or nem:eProcedures.02 = '9923003' or nem:eProcedures.03/@PN) then '' else key('nemSch_key_elements', 'eProcedures.01', $nemSch_elements)" />
      <sch:let name="eProcedures.03" value="if(nem:eProcedures.03 != '') then '' else key('nemSch_key_elements', 'eProcedures.03', $nemSch_elements)" />
      <sch:let name="nemsisElements" value="(nem:eProcedures.02, nem:eProcedures.03, (nem:eProcedures.01)[. = ''])" />
      <!-- Assert that none of the elements above should be flagged. If the assert fails, list the flagged elements.  -->
      <sch:assert id="nemSch_consistency_eProcedures.ProcedureGroup_all" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($eProcedures.01 or $eProcedures.03)">
      When a procedure is performed, the following should be recorded:
      <sch:value-of select="string-join(($eProcedures.01, $eProcedures.03)[. != ''], ', ')" /></sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_consistency_eVitals.VitalGroup" context="nem:eVitals.VitalGroup[some $element in .//* satisfies normalize-space($element) != '']">
      <!-- Flag each of the following elements if it is empty. -->
      <sch:let name="eVitals.01" value="if(nem:eVitals.01 != '' or nem:eVitals.02 = '9923003') then '' else key('nemSch_key_elements', 'eVitals.01', $nemSch_elements)" />
      <sch:let name="nemsisElements" value="(nem:eVitals.02, (nem:eVitals.01)[. = ''])" />
      <!-- Assert that none of the elements above should be flagged. If the assert fails, list the flagged elements.  -->
      <sch:assert id="nemSch_consistency_eVitals.VitalGroup_all" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($eVitals.01)">
      When a set of vital signs is obtained, the following should be recorded:
      <sch:value-of select="string-join(($eVitals.01)[. != ''], ', ')" /></sch:assert>
    </sch:rule>
  </sch:pattern>
  <?DSDL_INCLUDE_END includes/pattern_consistency_group.xml?>
  <?DSDL_INCLUDE_START includes/pattern_consistency_NilNvPn.xml?>
  <sch:pattern id="nemSch_consistency_nilNvPn">
    <!-- This pattern allows the following combinations of nil, NV, and PN attributes:
         * For dCustomResults.01 and eCustomResults.01: Any combination
         * For elements in eExam.AssessmentGroup: PN (nil and NV are not allowed per the XSD)
         * For eInjury.04, eMedications.03, and eProcedures.03 only: PN and not(nil) and not(NV)
         * nil and either NV or PN but not both
       If an element has neither nil, NV, nor PN, the rules in this pattern are not fired (other 
       than the dummy rule for CustomResults).
       The XSD ensures consistency between the nil attribute and whether the element is empty, so 
       that combination is not checked here.
  -->
    <sch:title>The combination of nil, Not Value (NV), and Pertinent Negative (PN) attributes for an element is appropriate.</sch:title>
    <sch:rule id="nemSch_nilNvPn_customResults" context="nem:dCustomResults.01 | nem:eCustomResults.01">
      <!-- This rule fires when dCustomResults.01 or eCustomResults.01 Custom Data Element Result has 
         a Pertinent Negative attribute. Nothing is checked. CustomResults should be validated 
         based on information contained in CustomConfiguration. -->
      <sch:let name="nemsisElements" value="." />
      <sch:report role="[WARNING]" diagnostics="nemsisDiagnostic" test="false()">
      Dummy report needed to make this rule valid. This report will never succeed.
    </sch:report>
    </sch:rule>
    <sch:rule id="nemSch_nilNvPn_eExam.AssessmentGroup" context="nem:eExam.AssessmentGroup//*[@PN]">
      <!-- This rule fires when an element in eExam.Assessment Group has a Pertinent Negative 
         attribute. Nothing is checked, since the nil and NV attributes are not allowed.  -->
      <sch:let name="nemsisElements" value="." />
      <sch:report role="[WARNING]" diagnostics="nemsisDiagnostic" test="false()">
      Dummy report needed to make this rule valid. This report will never succeed.
    </sch:report>
    </sch:rule>
    <sch:rule id="nemSch_nilNvPn_Pn_injury_medication_procedure" context="nem:eInjury.04[@PN] | nem:eMedications.03[@PN] | nem:eProcedures.03[@PN]">
      <!-- This rule fires when eInjury.04 Vehicular, Pedestrian, or Other Injury Risk Factor or eMedications.03 Medication Given or eProcedures.03 Procedure has a Pertinent Negative attribute. -->
      <sch:let name="nemsisElements" value="." />
      <!-- Assert that the element should also have a value and should not have a Not Value attribute. -->
      <sch:assert id="nemSch_nilNvPn_Pn_Not_NilNv" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not(@NV) and not(@xsi:nil = 'true')">
      When <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> has a Pertinent Negative, it should have a value and it should not have a Not Value (Not Applicable, Not Recorded, or Not Reporting).
    </sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_nilNvPn_Pn" context="*[@PN]">
      <!-- This rule fires when an element (other than those selected in the previous rules) has a Pertinent Negative attribute. -->
      <sch:let name="nemsisElements" value="." />
      <!-- Assert that the element should be empty and should not have a Not Value attribute. -->
      <sch:assert id="nemSch_nilNvPn_Pn_Nv_Not_Nil" role="[ERROR]" diagnostics="nemsisDiagnostic" test="not(@NV) and @xsi:nil = 'true'">
      When <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> has a Pertinent Negative, it should be empty and it should not have a Not Value (Not Applicable, Not Recorded, or Not Reporting).
    </sch:assert>
    </sch:rule>
    <!-- This rule fires when an element is empty (and does not have a Pertinent Negative attribute). -->
    <sch:rule id="nemSch_nilNvPn_nil" context="*[@xsi:nil = 'true']">
      <sch:let name="nemsisElements" value="." />
      <!-- Assert that the element should have a Not Value attribute or a Pertinent Negative 
         attribute. The presence of a Pertinent Negative attribute is not specifically asserted
         because if it was present, one of the rules above would have fired instead of this one. -->
      <sch:assert id="nemSch_nilNvPn_nil_Nv" role="[ERROR]" diagnostics="nemsisDiagnostic" test="@NV">
      When <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> is empty, it should have a Not Value (Not Applicable, Not Recorded, or Not Reporting) or a Pertinent Negative (if allowed for the element).
    </sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_nilNvPn_Nv" context="*[@NV]">
      <!-- This rule fires when an element has a Not Value attribute (but does not have a Pertinent Negative attribute and is not empty). -->
      <sch:let name="nemsisElements" value="." />
      <!-- Assert that the element should be empty. (This is not specifically asserted because if 
         the element was empty, the rule above would have fired instead of this one). -->
      <sch:assert id="nemSch_nilNvPn_Nv_Nil" role="[ERROR]" diagnostics="nemsisDiagnostic" test="false()">
      When <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> has a Not Value (Not Applicable, Not Recorded, or Not Reporting), it should be empty.
    </sch:assert>
    </sch:rule>
  </sch:pattern>
  <?DSDL_INCLUDE_END includes/pattern_consistency_NilNvPn.xml?>
  <?DSDL_INCLUDE_START includes/pattern_format_ansi.xml?>
  <sch:pattern id="nemSch_format_ansi">
    <!-- This pattern validates ANSI codes (states and counties). The XSD constrains the length 
    of the codes to exactly two characters for states and exactly five characters for counties. 
    This pattern further constrains the codes to be composed of digits only. This constraint could 
    be defined in the XSD instead, but it currently is not. -->
    <sch:title>ANSI state and county codes are numeric.</sch:title>
    <sch:rule id="nemSch_format_ansi_county" context="nem:dAgency.06 | nem:dFacility.11 | nem:dLocation.10 | nem:eDisposition.06 | nem:ePatient.07 | nem:eScene.21">
      <!-- This rule matches elements with the ANSICountyCode XSD type. -->
      <sch:let name="nemsisElements" value="." />
      <!-- Assert that the element either is empty or contains an integer value. -->
      <sch:assert id="nemSch_format_ansi_countyDigits" role="[ERROR]" diagnostics="nemsisDiagnostic" test=". = '' or . castable as xs:integer">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be a number representing the ANSI code for the county.
    </sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_format_ansi_state" context="nem:dAgency.04 | nem:dAgency.05 | nem:dConfiguration.01 | nem:dContact.07 | nem:dFacility.09 | nem:dLocation.08 | nem:dPersonnel.06 | nem:dPersonnel.22 | nem:eDisposition.05 | nem:ePatient.08 | nem:ePatient.20 | nem:ePayment.14 | nem:ePayment.28 | nem:ePayment.36 | nem:eScene.18">
      <!-- This rule matches elements with the ANSIStateCode XSD type. -->
      <sch:let name="nemsisElements" value="." />
      <!-- Assert that the element either is empty or contains an integer value. -->
      <sch:assert id="nemSch_format_ansi_stateDigits" role="[ERROR]" diagnostics="nemsisDiagnostic" test=". = '' or . castable as xs:integer">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be a number representing the ANSI code for the state.
    </sch:assert>
    </sch:rule>
  </sch:pattern>
  <?DSDL_INCLUDE_END includes/pattern_format_ansi.xml?>
  <?DSDL_INCLUDE_START includes/pattern_sequence_time.xml?>
  <sch:pattern id="nemSch_sequence_time">
    <!-- This pattern validates the sequence of date/time elements. Each date/time element in a 
       record should have a value that is not too early or too late compared to certain other 
       elements in the record. -->
    <sch:title>The sequence of date/time elements is appropriate.</sch:title>
    <sch:rule id="nemSch_sequence_time_eTimes" context="nem:eTimes">
      <!-- Flag each of the following elements if it occurs too early in the sequence of date/times. -->
      <!-- eAirway.10: Date/Time Decision to Manage the Patient with an Invasive Airway should not occur prior to: Unit Notified by Dispatch Date/Time. -->
      <sch:let name="eAirway.10" value="if(not(../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.10)                                           or (every $element in (nem:eTimes.03)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.10)))                                          then '' else key('nemSch_key_elements', 'eAirway.10', $nemSch_elements)" />
      <!-- eAirway.11: Date/Time Invasive Airway Placement Attempts Abandoned should not occur prior to: Date/Time Decision to Manage the Patient with an Invasive Airway, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Arrived at Patient Date/Time. -->
      <sch:let name="eAirway.11" value="if(not(../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.11)                                           or (every $element in (../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.10, nem:eTimes.03, nem:eTimes.04, nem:eTimes.07)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.11)))                                           then '' else key('nemSch_key_elements', 'eAirway.11', $nemSch_elements)" />
      <!-- eArrest.15: Date/Time Resuscitation Discontinued: No "should not occur prior to" constraints. -->
      <!-- eOutcome.11: Date/Time of Hospital Admission should not occur prior to: Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Unit En Route Date/Time, Unit Arrived on Scene Date/Time, Arrived at Patient Date/Time, Transfer of EMS Patient Care Date/Time, Unit Left Scene Date/Time, Arrival at Destination Landing Area Date/Time, Patient Arrived at Destination Date/Time, Destination Patient Transfer of Care Date/Time. -->
      <sch:let name="eOutcome.11" value="if(not(../nem:eOutcome/nem:eOutcome.11)                                           or (every $element in (nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.09, nem:eTimes.10, nem:eTimes.11, nem:eTimes.12)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(../nem:eOutcome/nem:eOutcome.11)))                                            then '' else key('nemSch_key_elements', 'eOutcome.11', $nemSch_elements)" />
      <!-- eOutcome.16: Date/Time of Hospital Discharge should not occur prior to: Date/Time of Hospital Admission, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Unit En Route Date/Time, Unit Arrived on Scene Date/Time, Arrived at Patient Date/Time, Transfer of EMS Patient Care Date/Time, Unit Left Scene Date/Time, Arrival at Destination Landing Area Date/Time, Patient Arrived at Destination Date/Time, Destination Patient Transfer of Care Date/Time. -->
      <sch:let name="eOutcome.16" value="if(not(../nem:eOutcome/nem:eOutcome.16)                                           or (every $element in (../nem:eOutcome/nem:eOutcome.11, nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.09, nem:eTimes.10, nem:eTimes.11, nem:eTimes.12)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(../nem:eOutcome/nem:eOutcome.16)))                                            then '' else key('nemSch_key_elements', 'eOutcome.16', $nemSch_elements)" />
      <!-- ePayment.03: Date Physician Certification Statement Signed: No "should not occur prior to" constraints. -->
      <!-- eScene.05: Date/Time Initial Responder Arrived on Scene: No "should not occur prior to" constraints. -->
      <!-- eTimes.01: PSAP Call Date/Time: No "should not occur prior to" constraints. -->
      <!-- eTimes.02: Dispatch Notified Date/Time should not occur prior to: PSAP Call Date/Time. -->
      <sch:let name="eTimes.02" value="if(not(nem:eTimes.02)                                          or (every $element in (nem:eTimes.01)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.02)))                                          then '' else key('nemSch_key_elements', 'eTimes.02', $nemSch_elements)" />
      <!-- eTimes.03: Unit Notified by Dispatch Date/Time should not occur prior to: PSAP Call Date/Time, Dispatch Notified Date/Time. -->
      <sch:let name="eTimes.03" value="if(                                                               (every $element in (nem:eTimes.01, nem:eTimes.02)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.03)))                                          then '' else key('nemSch_key_elements', 'eTimes.03', $nemSch_elements)" />
      <!-- eTimes.04: Dispatch Acknowledged Date/Time should not occur prior to: Unit Notified Date/Time. -->
      <sch:let name="eTimes.04" value="if(not(nem:eTimes.04)                                          or (every $element in (nem:eTimes.03)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.04)))                                          then '' else key('nemSch_key_elements', 'eTimes.04', $nemSch_elements)" />
      <!-- eTimes.05: Unit En Route Date/Time should not occur prior to: Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time. -->
      <sch:let name="eTimes.05" value="if(nem:eTimes.05 = ''                                         or (every $element in (nem:eTimes.03, nem:eTimes.04)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.05)))                                          then '' else key('nemSch_key_elements', 'eTimes.05', $nemSch_elements)" />
      <!-- eTimes.06: Unit Arrived on Scene Date/Time should not occur prior to: Date/Time Initial Responder Arrived on Scene, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Unit En Route Date/Time. -->
      <sch:let name="eTimes.06" value="if(nem:eTimes.06 = ''                                         or (every $element in (../nem:eScene/nem:eScene.05, nem:eTimes.03, nem:eTimes.04, nem:eTimes.05)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.06)))                                          then '' else key('nemSch_key_elements', 'eTimes.06', $nemSch_elements)" />
      <!-- eTimes.07: Arrived at Patient Date/Time should not occur prior to: Date/Time Initial Responder Arrived on Scene, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time. (It may occur prior to Unit En Route Date/Time or Unit Arrived on Scene Date/Time in cases where a crew member arrived before the unit arrived.) -->
      <sch:let name="eTimes.07" value="if(nem:eTimes.07 = ''                                         or (every $element in (../nem:eScene/nem:eScene.05, nem:eTimes.03, nem:eTimes.04)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.07)))                                         then '' else key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)" />
      <!-- eTimes.08: Transfer of EMS Patient Care Date/Time should not occur prior to: Date/Time Decision to Manage the Patient with an Invasive Airway, Date/Time Invasive Airway Placement Attempts Abandoned, Date/Time of Cardiac Arrest, Date/Time Resuscitation Discontinued, Last Oral Intake, Date/Time of ACN Incident, Date/Time Initial Responder Arrived on Scene, Date/Time of Symptom Onset/Last Normal, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Unit En Route Date/Time, Unit Arrived on Scene Date/Time, Arrived at Patient Date/Time. -->
      <sch:let name="eTimes.08" value="if(not(nem:eTimes.08) or nem:eTimes.08 = ''                                         or (every $element in (../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.10, ../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.11, ../nem:eArrest/nem:eArrest.14, ../nem:eArrest/nem:eArrest.15, ../nem:eHistory/nem:eHistory.19, ../nem:eInjury/nem:eInjury.CollisionGroup/nem:eInjury.14, ../nem:eScene/nem:eScene.05, ../nem:eSituation/nem:eSituation.01, nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.08)))                                          then '' else key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)" />
      <!-- eTimes.09: Unit Left Scene Date/Time should not occur prior to: Date/Time Initial Responder Arrived on Scene, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Unit En Route Date/Time, Unit Arrived on Scene Date/Time, Arrived at Patient Date/Time. (It may occur prior to Transfer of EMS Patient Care Date/Time if the unit transported the patient to a rendezvous point prior to transferring care.) -->
      <sch:let name="eTimes.09" value="if(nem:eTimes.09 = ''                                         or (every $element in (../nem:eScene/nem:eScene.05, nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.09)))                                         then '' else key('nemSch_key_elements', 'eTimes.09', $nemSch_elements)" />
      <!-- eTimes.10: Arrival at Destination Landing Area Date/Time should not occur prior to: Date/Time Initial Responder Arrived on Scene, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Unit En Route Date/Time, Unit Arrived on Scene Date/Time, Arrived at Patient Date/Time, Unit Left Scene Date/Time. -->
      <sch:let name="eTimes.10" value="if(not(nem:eTimes.10)                                         or (every $element in (../nem:eScene/nem:eScene.05, nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.09)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.10)))                                         then '' else key('nemSch_key_elements', 'eTimes.10', $nemSch_elements)" />
      <!-- eTimes.11: Patient Arrived at Destination Date/Time should not occur prior to: Date/Time Initial Responder Arrived on Scene, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Unit En Route Date/Time, Unit Arrived on Scene Date/Time, Arrived at Patient Date/Time, Unit Left Scene Date/Time, Arrival at Destination Landing Area Date/Time. -->
      <sch:let name="eTimes.11" value="if(nem:eTimes.11 = ''                                         or (every $element in (../nem:eScene/nem:eScene.05, nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.09, nem:eTimes.10)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.11)))                                         then '' else key('nemSch_key_elements', 'eTimes.11', $nemSch_elements)" />
      <!-- eTimes.12: Destination Patient Transfer of Care Date/Time should not occur prior to: Date/Time Decision to Manage the Patient with an Invasive Airway, Date/Time Invasive Airway Placement Attempts Abandoned, Date/Time of Cardiac Arrest, Date/Time Resuscitation Discontinued, Last Oral Intake, Date/Time of ACN Incident, Date/Time Initial Responder Arrived on Scene, Date/Time of Symptom Onset/Last Normal, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Unit En Route Date/Time, Unit Arrived on Scene Date/Time, Arrived at Patient Date/Time, Unit Left Scene Date/Time, Arrival at Destination Landing Area Date/Time. -->
      <sch:let name="eTimes.12" value="if(nem:eTimes.12 = ''                                         or (every $element in (../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.10, ../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.11, ../nem:eArrest/nem:eArrest.14, ../nem:eArrest/nem:eArrest.15, ../nem:eHistory/nem:eHistory.19, ../nem:eInjury/nem:eInjury.CollisionGroup/nem:eInjury.14, ../nem:eScene/nem:eScene.05, ../nem:eSituation/nem:eSituation.01, nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.09, nem:eTimes.10, nem:eTimes.11)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.12)))                                         then '' else key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)" />
      <!-- eTimes.13: Unit Back in Service Date/Time should not occur prior to: Date/Time Decision to Manage the Patient with an Invasive Airway, Date/Time Invasive Airway Placement Attempts Abandoned, Date/Time of Cardiac Arrest, Date/Time Resuscitation Discontinued, Last Oral Intake, Date/Time of ACN Incident, Date/Time Initial Responder Arrived on Scene, Date/Time of Symptom Onset/Last Normal, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Unit En Route Date/Time, Unit Arrived on Scene Date/Time, Arrived at Patient Date/Time, Unit Left Scene Date/Time, Arrival at Destination Landing Area Date/Time, Transfer of EMS Patient Care Date/Time, Destination Patient Transfer of Care Date/Time, Unit Canceled Date/Time. -->
      <sch:let name="eTimes.13" value="if(                                         (every $element in (../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.10, ../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.11, ../nem:eArrest/nem:eArrest.14, ../nem:eArrest/nem:eArrest.15, ../nem:eHistory/nem:eHistory.19, ../nem:eInjury/nem:eInjury.CollisionGroup/nem:eInjury.14, ../nem:eScene/nem:eScene.05, ../nem:eSituation/nem:eSituation.01, nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.09, nem:eTimes.10, nem:eTimes.11, nem:eTimes.12, nem:eTimes.14)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.13)))                                          then '' else key('nemSch_key_elements', 'eTimes.13', $nemSch_elements)" />
      <!-- eTimes.14: Unit Canceled Date/Time should not occur prior to: Unit Notified Date/Time. -->
      <sch:let name="eTimes.14" value="if(not(nem:eTimes.14)                                         or (every $element in (nem:eTimes.03)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.14)))                                         then '' else key('nemSch_key_elements', 'eTimes.14', $nemSch_elements)" />
      <!-- eTimes.15: Unit Back at Home Location Date/Time should not occur prior to: Date/Time Decision to Manage the Patient with an Invasive Airway, Date/Time Invasive Airway Placement Attempts Abandoned, Date/Time of Cardiac Arrest, Date/Time Resuscitation Discontinued, Date/Time of Destination Prearrival Alert or Activation, Last Oral Intake, Date/Time of ACN Incident, Date/Time Initial Responder Arrived on Scene, Date/Time of Symptom Onset/Last Normal, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Unit En Route Date/Time, Unit Arrived on Scene Date/Time, Arrived at Patient Date/Time, Unit Left Scene Date/Time, Arrival at Destination Landing Area Date/Time, Transfer of EMS Patient Care Date/Time, Destination Patient Transfer of Care Date/Time, Unit Canceled Date/Time. -->
      <sch:let name="eTimes.15" value="if(not(nem:eTimes.15)                                         or (every $element in (../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.10, ../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.11, ../nem:eArrest/nem:eArrest.14, ../nem:eArrest/nem:eArrest.15, ../nem:eDisposition/nem:eDisposition.HospitalTeamActivationGroup/nem:eDisposition.25, ../nem:eHistory/nem:eHistory.19, ../nem:eInjury/nem:eInjury.CollisionGroup/nem:eInjury.14, ../nem:eScene/nem:eScene.05, ../nem:eSituation/nem:eSituation.01, nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.09, nem:eTimes.10, nem:eTimes.11, nem:eTimes.12, nem:eTimes.14)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.15)))                                         then '' else key('nemSch_key_elements', 'eTimes.15', $nemSch_elements)" />
      <!-- eTimes.16: EMS Call Completed Date/Time should not occur prior to: Unit Back in Service Date/Time. -->
      <sch:let name="eTimes.16" value="if(not(nem:eTimes.16)                                         or (every $element in (nem:eTimes.13)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(nem:eTimes.16)))                                         then '' else key('nemSch_key_elements', 'eTimes.16', $nemSch_elements)" />
      <sch:let name="nemsisElements" value="(../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.10, ../nem:eAirway/nem:eAirway.AirwayGroup/nem:eAirway.11, ../nem:eArrest/nem:eArrrest.14, ../nem:eArrest/nem:eArrest.15, ../nem:eHistory/nem:eHistory.19, ../nem:eInjury/nem:eInjury.CollisionGroup/nem:eInjury.14, ../nem:eOutcome/nem:eOutcome.11, ../nem:eOutcome/nem:eOutcome.16, ../nem:eScene/nem:eScene.05, ../nem:eSituation/nem:eSituation.01, *)[. != '']" />
      <!-- Assert that none of the elements above should be flagged. If the assert fails, list the flagged elements.  -->
      <sch:assert id="nemSch_sequence_time_eTimes_order" role="[WARNING]" diagnostics="nemsisDiagnostic" test="not($eAirway.10 or $eAirway.11 or $eOutcome.11 or $eOutcome.16 or $eTimes.02 or $eTimes.03 or $eTimes.04 or $eTimes.05 or $eTimes.06 or $eTimes.07 or $eTimes.08 or $eTimes.09 or $eTimes.10 or $eTimes.11 or $eTimes.12 or $eTimes.13 or $eTimes.14 or $eTimes.15 or $eTimes.16)">
      Date/Times should be in order. The following times are too early:
      <sch:value-of select="string-join(($eAirway.10, $eAirway.11, $eOutcome.11, $eOutcome.16, $eTimes.02, $eTimes.03, $eTimes.04, $eTimes.05, $eTimes.06, $eTimes.07, $eTimes.08, $eTimes.09, $eTimes.10, $eTimes.11, $eTimes.12, $eTimes.13, $eTimes.14, $eTimes.15, $eTimes.16)[. != ''], ', ')" /></sch:assert>
    </sch:rule>
    <!-- eAirway.02: Date/Time Airway Device Placement Confirmation: No sequence constraints. -->
    <sch:rule id="nemSch_sequence_time_eDevice.02" context="nem:eDevice.02[. != '']">
      <sch:let name="nemsisElements" value="(., ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15))[. != '']" />
      <!-- eDevice.02: Date/Time of Event (per Medical Device) should not occur prior to: Date/Time Initial Responder Arrived on Scene, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Arrived at Patient Date/Time. -->
      <sch:assert id="nemSch_sequence_time_eDevice.02_after" role="[WARNING]" diagnostics="nemsisDiagnostic" test="every $element in (ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.07))[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(.)">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be no earlier than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)" />.
    </sch:assert>
      <!-- eDevice.02: Date/Time of Event (per Medical Device) should not occur after: Transfer of EMS Patient Care Date/Time, Destination Patient Transfer of Care Date/Time, Unit Back in Service Date/Time, Unit Back at Home Location Date/Time. -->
      <sch:assert id="nemSch_sequence_time_eDevice.02_before" role="[WARNING]" diagnostics="nemsisDiagnostic" test="every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.)">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)" /> or <sch:value-of select="key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)" />.
    </sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_sequence_time_eDisposition.25" context="nem:eDisposition.25[. != '']">
      <sch:let name="nemsisElements" value="(., ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15))[. != '']" />
      <!-- eDisposition.25: Date/Time of Destination Prearrival Alert or Activation should not occur prior to: Unit Notified by Dispatch Date/Time. -->
      <sch:assert id="nemSch_sequence_time_eDisposition.25_after" role="[WARNING]" diagnostics="nemsisDiagnostic" test="every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03)[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(.)">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be no earlier than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)" />.
    </sch:assert>
      <!-- eDisposition.25: Date/Time of Destination Prearrival Alert or Activation should not occur after: Destination Patient Transfer of Care Date/Time, Unit Back in Service Date/Time, Unit Back at Home Location Date/Time. -->
      <sch:assert id="nemSch_sequence_time_eDisposition.25_before" role="[WARNING]" diagnostics="nemsisDiagnostic" test="every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.12, nem:eTimes.13, nem:eTimes.15)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.)">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)" /> or <sch:value-of select="key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)" />.
    </sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_sequence_time_eExam.03" context="nem:eExam.03[. != '']">
      <sch:let name="nemsisElements" value="(., ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15))[. != '']" />
      <!-- eExam.03: Date/Time of Assessment should not occur prior to: Date/Time Initial Responder Arrived on Scene, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Arrived at Patient Date/Time. -->
      <sch:assert id="nemSch_sequence_time_eExam.03_after" role="[WARNING]" diagnostics="nemsisDiagnostic" test="every $element in (ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.07))[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(.)">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be no earlier than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)" />.
    </sch:assert>
      <!-- eExam.03: Date/Time of Assessment should not occur after: Transfer of EMS Patient Care Date/Time, Destination Patient Transfer of Care Date/Time, Unit Back in Service Date/Time, Unit Back at Home Location Date/Time. -->
      <sch:assert id="nemSch_sequence_time_eExam.03_before" role="[WARNING]" diagnostics="nemsisDiagnostic" test="every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.)">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)" /> or <sch:value-of select="key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)" />.
    </sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_sequence_time_eLabs.01" context="nem:eLabs.01[. != '']">
      <sch:let name="nemsisElements" value="(., nem:eLabs.02, ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15))[. != '']" />
      <!-- eLabs.01: Unless eLabs.02 Study/Result Prior to this Unit's EMS Care is "Yes", Date/Time of Laboratory or Imaging Result should not occur prior to: Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Arrived at Patient Date/Time. -->
      <sch:assert id="nemSch_sequence_time_eLabs.01_after" role="[WARNING]" diagnostics="nemsisDiagnostic" test="nem:eLabs.02 = '9923003' or (every $element in (ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.07))[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(.))">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be no earlier than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)" />, unless <sch:value-of select="key('nemSch_key_elements', 'eLabs.02', $nemSch_elements)" /> is "Yes".
    </sch:assert>
      <!-- eLabs.01: Date/Time of Laboratory or Imaging Result should not occur after: Transfer of EMS Patient Care Date/Time, Destination Patient Transfer of Care Date/Time, Unit Back in Service Date/Time, Unit Back at Home Location Date/Time. -->
      <sch:assert id="nemSch_sequence_time_eLabs.01_before" role="[WARNING]" diagnostics="nemsisDiagnostic" test="every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.)">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)" /> or <sch:value-of select="key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)" />.
    </sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_sequence_time_eMedications.01" context="nem:eMedications.01[. != '']">
      <sch:let name="nemsisElements" value="(., nem:eMedications.02, ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15))[. != '']" />
      <!-- eMedications.03: Unless eMedications.02 Medication Administered Prior to this Unit's EMS Care is "Yes", Date/Time Medication Administered should not occur prior to: Date/Time Initial Responder Arrived on Scene, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Arrived at Patient Date/Time. -->
      <sch:assert id="nemSch_sequence_time_eMedications.01_after" role="[WARNING]" diagnostics="nemsisDiagnostic" test="nem:eMedications.02 = '9923003' or (every $element in (ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.07))[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(.))">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be no earlier than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)" />, unless <sch:value-of select="key('nemSch_key_elements', 'eMedications.02', $nemSch_elements)" /> is "Yes".
    </sch:assert>
      <!-- eMedications.03: Date/Time Medication Administered should not occur after: Transfer of EMS Patient Care Date/Time, Destination Patient Transfer of Care Date/Time, Unit Back in Service Date/Time, Unit Back at Home Location Date/Time. -->
      <sch:assert id="nemSch_sequence_time_eMedications.01_before" role="[WARNING]" diagnostics="nemsisDiagnostic" test="every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.)">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)" /> or <sch:value-of select="key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)" />.
    </sch:assert>
    </sch:rule>
    <!-- eOther.19: Date/Time of Signature: No sequence constraints. -->
    <sch:rule id="nemSch_sequence_time_eProcedures.01" context="nem:eProcedures.01[. != '']">
      <sch:let name="nemsisElements" value="(., nem:eProcedures.02, ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15))[. != '']" />
      <!-- eProcedures.03: Unless eProcedures.02 Procedure Performed Prior to this Unit's EMS Care is "Yes", Date/Time Procedure Performed should not occur prior to: Date/Time Initial Responder Arrived on Scene, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Arrived at Patient Date/Time. -->
      <sch:assert id="nemSch_sequence_time_eProcedures.01_after" role="[WARNING]" diagnostics="nemsisDiagnostic" test="nem:eProcedures.02 = '9923003' or (every $element in (ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.07))[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(.))">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be no earlier than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)" /> or <sch:value-of select="key('nemSch_key_elements', 'eScene.05', $nemSch_elements)" />, unless <sch:value-of select="key('nemSch_key_elements', 'eProcedures.02', $nemSch_elements)" /> is "Yes".
    </sch:assert>
      <!-- eProcedures.03: Date/Time Procedure Performed should not occur after: Transfer of EMS Patient Care Date/Time, Destination Patient Transfer of Care Date/Time, Unit Back in Service Date/Time, Unit Back at Home Location Date/Time. -->
      <sch:assert id="nemSch_sequence_time_eProcedures.01_before" role="[WARNING]" diagnostics="nemsisDiagnostic" test="every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.)">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)" /> or <sch:value-of select="key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)" />.
    </sch:assert>
    </sch:rule>
    <sch:rule id="nemSch_sequence_time_eVitals.01" context="nem:eVitals.01[. != '']">
      <sch:let name="nemsisElements" value="(., nem:eVitals.02, ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.05, nem:eTimes.06, nem:eTimes.07, nem:eTimes.08, nem:eTimes.12, nem:eTimes.13))[. != '']" />
      <!-- eVitals.03: Unless eVitals.02 Obtained Prior to this Unit's EMS Care is "Yes", Date/Time Vital Signs Taken should not occur prior to: Date/Time Initial Responder Arrived on Scene, Unit Notified by Dispatch Date/Time, Dispatch Acknowledged Date/Time, Arrived at Patient Date/Time. -->
      <sch:assert id="nemSch_sequence_time_eVitals.01_after" role="[WARNING]" diagnostics="nemsisDiagnostic" test="nem:eVitals.02 = '9923003' or (every $element in (ancestor::nem:PatientCareReport/nem:eScene/nem:eScene.05, ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.03, nem:eTimes.04, nem:eTimes.07))[. != ''] satisfies xs:dateTime($element) &lt;= xs:dateTime(.))">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be no earlier than <sch:value-of select="key('nemSch_key_elements', 'eTimes.07', $nemSch_elements)" />, unless <sch:value-of select="key('nemSch_key_elements', 'eVitals.02', $nemSch_elements)" /> is "Yes".
    </sch:assert>
      <!-- eVitals.03: Date/Time Vital Signs Taken should not occur after: Transfer of EMS Patient Care Date/Time, Destination Patient Transfer of Care Date/Time, Unit Back in Service Date/Time, Unit Back at Home Location Date/Time. -->
      <sch:assert id="nemSch_sequence_time_eVitals.01_before" role="[WARNING]" diagnostics="nemsisDiagnostic" test="every $element in ancestor::nem:PatientCareReport/nem:eTimes/(nem:eTimes.08, nem:eTimes.12, nem:eTimes.13, nem:eTimes.15)[. != ''] satisfies xs:dateTime($element) &gt;= xs:dateTime(.)">
        <sch:value-of select="key('nemSch_key_elements', local-name(), $nemSch_elements)" /> should be no later than <sch:value-of select="key('nemSch_key_elements', 'eTimes.08', $nemSch_elements)" /> or <sch:value-of select="key('nemSch_key_elements', 'eTimes.12', $nemSch_elements)" />.
    </sch:assert>
    </sch:rule>
  </sch:pattern>
  <?DSDL_INCLUDE_END includes/pattern_sequence_time.xml?>
  <!-- DIAGNOSTICS -->
  <sch:diagnostics>
    <?DSDL_INCLUDE_START includes/diagnostic_nemsisDiagnostic.xml?>
    <sch:diagnostic id="nemsisDiagnostic">
      <!-- This is the NEMSIS national diagnostic. It must exist in every NEMSIS Schematron document, 
       and it should be referenced by every assert and report. It provides nationally-
       standardized, structured data to communicate which data elements are of interest in a 
       failed assert or successful report. -->
      <nemsisDiagnostic xmlns="http://www.nemsis.org" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        <!-- Elements that uniquely identify the record where the problem happened. -->
        <record>
          <xsl:copy-of select="ancestor-or-self::*:DemographicReport/*:dAgency/(*:dAgency.01 | *:dAgency.02 | *:dAgency.04)" />
          <xsl:copy-of select="ancestor-or-self::*:Header/*:DemographicGroup/*" />
          <xsl:copy-of select="ancestor-or-self::*:PatientCareReport/*:eRecord/*:eRecord.01" />
        </record>
        <!-- Elements that the user may want to revisit to resolve the problem, along with their values. -->
        <elements>
          <xsl:for-each select="$nemsisElements">
            <xsl:element name="element">
              <xsl:attribute name="location">
                <xsl:apply-templates select="." mode="schematron-get-full-path" />
              </xsl:attribute>
              <xsl:for-each select="@*">
                <xsl:attribute name="{name()}">
                  <xsl:value-of select="." />
                </xsl:attribute>
              </xsl:for-each>
              <xsl:if test="not(*)">
                <xsl:value-of select="." />
              </xsl:if>
            </xsl:element>
          </xsl:for-each>
        </elements>
        <!-- Elements that were missing, that the user may want to visit to resolve the problem. -->
        <elementsMissing>
          <xsl:variable name="default_context" select="." />
          <xsl:for-each select="tokenize($nemsisElementsMissing, ' ')">
            <xsl:variable name="parent" select="$nemsisElementsMissingContext[contains(local-name(), substring-before(current(), '.'))][1]" />
            <element>
              <xsl:attribute name="parentLocation">
                <xsl:choose>
                  <xsl:when test="$parent">
                    <xsl:apply-templates select="$parent" mode="schematron-get-full-path" />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:apply-templates select="$default_context" mode="schematron-get-full-path" />
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:attribute name="name">
                <xsl:value-of select="." />
              </xsl:attribute>
            </element>
          </xsl:for-each>
        </elementsMissing>
      </nemsisDiagnostic>
    </sch:diagnostic>
    <?DSDL_INCLUDE_END includes/diagnostic_nemsisDiagnostic.xml?>
  </sch:diagnostics>
</sch:schema>